{"version":3,"file":"static/js/310.cb62ec5b.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/contacts/selectors.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactUser\":\"ContactList_contactUser__-dJIC\",\"user\":\"ContactList_user__67mX+\",\"wrapper\":\"ContactList_wrapper__VP-XU\",\"contactList\":\"ContactList_contactList__UFVCg\",\"contactInfo\":\"ContactList_contactInfo__Sgq6p\"};","import styles from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/operations/contactsThunk';\nimport { getFilteredContacts, selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(getFilteredContacts);\n  const users = useSelector(selectContacts);\n  return (\n    <>\n      <h3 className={styles.contactInfo}>\n        Your phonebook has {users.length} contacts\n      </h3>\n      <hr />\n      <ul className={styles.contactList}>\n        {contacts.map(item => (\n          <li key={item.id} className={styles.contactUser}>\n\t\t\t\t\t\t<div className={styles.wrapper}>\n            <p className={styles.user}>\n              <b className={styles.userName}>{item.name}</b>\n            </p>\n            <span>{item.number}</span></div>\n            <button\n              type=\"button\"\n              onClick={() => dispatch(deleteContactThunk(item.id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactForm_container__qpJ1N\",\"form\":\"ContactForm_form__dhl+T\",\"inputField\":\"ContactForm_inputField__qJkou\",\"button\":\"ContactForm_button__eSwX9\"};","import styles from './ContactForm.module.css';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContactThunk } from 'redux/contacts/operations/contactsThunk';\nimport { Notify } from 'notiflix';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isInContact = contacts.some(\n      contact =>\n        contact.name.toLowerCase() ===\n        e.target.elements.name.value.toLowerCase()\n    );\n    if (isInContact) {\n      Notify.warning(`This contact has already exists`);\n      return;\n    }\n\n    const newObj = {\n      name: e.target.elements.name.value,\n      number: e.target.elements.number.value,\n    };\n    dispatch(addContactThunk(newObj));\n\n    e.target.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={styles.form} autoComplete=\"off\">\n      <label>\n        <input\n          className={styles.inputField}\n          placeholder=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n\n      <label>\n        <input\n          className={styles.inputField}\n          placeholder=\"Phone number\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\" className={styles.button}>\n        Add Contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"inputField\":\"Filter_inputField__GiGjH\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { filterContacts } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nimport styles from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const showFilteredContacts = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n\n  return (\n    <div>\n      <hr />\n      <label>\n        <input\n          type=\"text\"\n          placeholder=\"Find contacts by name...\"\n          value={filter}\n          onChange={showFilteredContacts}\n          className={styles.inputField}\n        />\n      </label>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { ContactForm } from '../components/ContactForm/ContactForm';\nimport { getContactsThunk } from 'redux/contacts/operations/contactsThunk';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectLoading = state => state.isLoading;\nexport const selectError = state => state.contacts.error;\n\nconst getFilter = state => state.filter;\nconst getContacts = state => state.contacts.items;\n\nexport const getFilteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    if (!contacts) return;\n    return contacts.filter(item =>\n      item.name.toLowerCase().trim().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n\n// export const getIsLoading = state => state.contacts.isLoading;\n// export const getStatusFilter = state => state.filter.status;\n"],"names":["ContactList","dispatch","useDispatch","contacts","useSelector","getFilteredContacts","users","selectContacts","className","styles","length","map","item","name","number","type","onClick","deleteContactThunk","id","ContactForm","onSubmit","e","preventDefault","some","contact","toLowerCase","target","elements","value","Notify","newObj","addContactThunk","reset","autoComplete","placeholder","pattern","title","required","Filter","filter","selectFilter","onChange","filterContacts","Tasks","isLoading","selectLoading","useEffect","getContactsThunk","Helmet","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","state","items","trim","includes"],"sourceRoot":""}